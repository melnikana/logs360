'use strict';

require('babel-polyfill');

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

var _chai = require('chai');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('simple-tail', function () {

    it('Tail last 5 lines', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var result, expected;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return (0, _index2.default)('./lib/test/sample.txt', 5);

                    case 2:
                        result = _context.sent;
                        expected = ['Hello number 9996', 'Hello number 9997', 'Hello number 9998', 'Hello number 9999', 'Hello number 10000'].reverse();

                        _chai.assert.equal(result[0], expected[0]);
                        _chai.assert.equal(result[1], expected[1]);
                        _chai.assert.equal(result[2], expected[2]);
                        _chai.assert.equal(result[3], expected[3]);
                        _chai.assert.equal(result[4], expected[4]);

                    case 9:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    })));

    it('Tail wrong file', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var result;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.prev = 0;
                        _context2.next = 3;
                        return (0, _index2.default)('fake', 5);

                    case 3:
                        result = _context2.sent;
                        _context2.next = 9;
                        break;

                    case 6:
                        _context2.prev = 6;
                        _context2.t0 = _context2['catch'](0);

                        _chai.assert.equal(_context2.t0.code, 'ENOENT');

                    case 9:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, undefined, [[0, 6]]);
    })));
});
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

require('babel-polyfill');

var _fs = require('mz/fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * simple-tail
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Tail last n lines from a given file.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Jesús Ángel González Novez
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Forked and inspired from https://github.com/alexbbt/read-last-lines
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Thanks to @alexbbt 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */


/**
 * Read in the last `n` lines of a file
 * @param  {string}   inputFilePath - file (direct or relative path to file.)
 * @param  {int}      maxLineCount  - max number of lines to read in.
 *
 * @return {promise}  A promise resolved with the lines or rejected with an error.
 */
var tail = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(inputFilePath, maxLineCount) {
        var self, NEW_LINE_CHARACTERS, encoding, readPreviousChar, exists, noExistsError, promises;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        self = {
                            stat: null,
                            file: null
                        };
                        _context.prev = 1;
                        NEW_LINE_CHARACTERS = ["\n", "\r"];
                        encoding = "utf8";

                        readPreviousChar = function readPreviousChar(stat, file, currentCharacterCount) {
                            return _fs2.default.read(file, Buffer.alloc(1), 0, 1, stat.size - 1 - currentCharacterCount).then(function (bytesReadAndBuffer) {
                                return String.fromCharCode(bytesReadAndBuffer[1][0]);
                            });
                        };

                        _context.next = 7;
                        return _fs2.default.exists(inputFilePath);

                    case 7:
                        exists = _context.sent;

                        if (exists) {
                            _context.next = 12;
                            break;
                        }

                        noExistsError = new Error("File does not exist");

                        noExistsError.code = 'ENOENT';
                        throw noExistsError;

                    case 12:
                        promises = [];

                        // Load file Stats.

                        promises.push(_fs2.default.stat(inputFilePath).then(function (stat) {
                            return self.stat = stat;
                        }));

                        // Open file for reading.
                        promises.push(_fs2.default.open(inputFilePath, "r").then(function (file) {
                            return self.file = file;
                        }));

                        return _context.abrupt('return', Promise.all(promises).then(function () {

                            var chars = 0;
                            var lineCount = 0;
                            var lines = "";

                            var doWhileLoop = function doWhileLoop() {
                                if (lines.length > self.stat.size) {
                                    lines = lines.substring(lines.length - self.stat.size);
                                }

                                if (lines.length >= self.stat.size || lineCount >= maxLineCount) {
                                    if (NEW_LINE_CHARACTERS.includes(lines.substring(0, 1))) {
                                        lines = lines.substring(1);
                                    }
                                    _fs2.default.close(self.file);

                                    return lines.split('\n').reverse() || [];
                                }

                                return readPreviousChar(self.stat, self.file, chars).then(function (nextCharacter) {
                                    lines = nextCharacter + lines;
                                    if (NEW_LINE_CHARACTERS.includes(nextCharacter) && lines.length > 1) {
                                        lineCount++;
                                    }
                                    chars++;
                                }).then(doWhileLoop);
                            };
                            return doWhileLoop();
                        }).catch(function (error) {
                            throw new Error(error);
                        }));

                    case 18:
                        _context.prev = 18;
                        _context.t0 = _context['catch'](1);

                        if (self.file !== null) {
                            _fs2.default.close(self.file);
                        }
                        return _context.abrupt('return', Promise.reject(_context.t0));

                    case 22:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined, [[1, 18]]);
    }));

    return function tail(_x, _x2) {
        return _ref.apply(this, arguments);
    };
}();

exports.default = tail;
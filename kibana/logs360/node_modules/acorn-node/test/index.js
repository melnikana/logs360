var test = require('tape')
var acorn = require('../')
var walk = require('../walk')
var baseAcorn = require('acorn')

test('analisa a sintaxe de propagação do objeto', function (t) {
  var ast = acorn.parse('var a = { ...b }')
  t.equal(ast.body[0].declarations[0].init.type, 'ObjectExpression')
  t.equal(ast.body[0].declarations[0].init.properties[0].type, 'SpreadElement')

  ast = acorn.parse('function a ({ ...b }) {}')
  t.equal(ast.body[0].params[0].type, 'ObjectPattern')
  t.equal(ast.body[0].params[0].properties[0].type, 'RestElement')

  t.end()
})

test('não altera o módulo principal do acorn', function (t) {
  t.throws(function () {
    baseAcorn.parse('var a = 10n')
  })
  t.end()
})

test('tokeniza a sintaxe de propagação do objeto', function (t) {
  var tokenizer = acorn.tokenizer('var a = { ...b }')

  t.doesNotThrow(function (t) {
    while (tokenizer.getToken().type !== acorn.tokTypes.eof) {}
  })
  t.end()
})

test('permite hashbangs por padrão', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('#!/usr/bin/env node\nconsole.log("ok")')
  })
  t.end()
})

test('permite retorno de nível superior por padrão', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('console.log("ok"); return; console.log("not ok")')
  })
  t.end()
})

test('suporta geradores assíncronos', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('async function* a () { await x; yield 1 }')
  })
  t.end()
})

test('suporta iteração assíncrona', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('async function l (y) { for await (const x of y) {} }')
  })
  t.end()
})

test('suporta captura opcional', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('try { throw null } catch {}')
  })
  t.end()
})

test('suporta bigint', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('50n ** 50n')
  })
  t.end()
})

test('suporta separadores numéricos', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('50_000_000n ** 1n')
  })
  t.end()
})

test('suporta import.meta com sourceType: module', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('console.log(import.meta.url)', { sourceType: 'module' })
  })
  t.end()
})

test('suporta dinâmico import() com sourceType: module', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('import("./whatever.mjs")', { sourceType: 'module' })
  })
  t.end()
})

test('suporta dinamicoc import() com sourceType: script', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('import("./whatever.mjs")', { sourceType: 'script' })
  })
  t.end()
})

test('suporta propriedades da instância de classe', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('class X { x = y }', { sourceType: 'script' })
  })
  t.end()
})

test('suporta propriedades de instância de classe privada', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('class X { #x = y }', { sourceType: 'script' })
  })
  t.end()
})

test('suporta propriedades estáticas de classe', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('class X { static x = y }', { sourceType: 'script' })
  })
  t.end()
})

test('suporta propriedades estáticas de classe privada', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('class X { static #x = y }', { sourceType: 'script' })
  })
  t.end()
})

test('suporta sintaxe de exportação de namespace com sourceType: module', function (t) {
  t.doesNotThrow(function () {
    acorn.parse('export * as x from "./x.mjs";', { sourceType: 'module' })
  })
  t.end()
})

test('walk suporta sintaxe de plug-in', function (t) {
  var ast = acorn.parse(
    'async function* a() { try { await import(xyz); } catch { for await (x of null) {} } yield import.meta.url }',
    { sourceType: 'module' }
  )
  t.plan(2)
  walk.simple(ast, {
    Import: function () {
      t.pass('import()')
    },
    MetaProperty: function () {
      t.pass('import.meta')
    }
  })
  t.end()
})
